<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaState" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
  <brief_description>
    An instance of a Lua virtual machine.
  </brief_description>
  <description>
  </description>
  <tutorials>
  </tutorials>
  <methods>
    <method name="create_table">
      <return type="LuaTable" />
      <param index="0" name="initial_values" type="Dictionary" default="{}" />
      <description>
        Returns a [LuaTable] and initializes it with the given dictionary.
        [codeblocks]
        [gdscript]
        var table = lua_state.create_table({
            "foo": "bar",
            "baz": 42
        })
        [/gdscript]
        [/codeblocks]
      </description>
    </method>
    <method name="do_file">
      <return type="Variant" />
      <param index="0" name="filename" type="String" />
      <param index="1" name="buffer_size" type="int" default="1024" />
      <param index="2" name="env" type="LuaTable" default="null" />
      <description>
        [param filename] supports absolute paths and relative paths. Defaults to searching in the "res://" directory.
        [param buffer_size] indicates the number of bytes read from the file at once. A larger value means fewer reads but more memory usage.

        This function reads Lua code from a file and executes it immediately.
        If execution returns a value, it will return a [Variant].
        If an error occurs during compilation (e.g., syntax error), it will return a [LuaError].
      </description>
    </method>
    <method name="do_string">
      <return type="Variant" />
      <param index="0" name="chunk" type="String" />
      <param index="1" name="chunkname" type="String" default="&quot;&quot;" />
      <param index="2" name="env" type="LuaTable" default="null" />
      <description>
        Executes code from [param chunk].
        If an error occurs during execution (e.g., syntax error), it will return a [LuaError].
      </description>
    </method>
    <method name="load_file">
      <return type="Variant" />
      <param index="0" name="filename" type="String" />
      <param index="1" name="buffer_size" type="int" default="1024" />
      <param index="2" name="env" type="LuaTable" default="null" />
      <description>
        [param filename] supports absolute paths and relative paths. Defaults to searching in the "res://" directory.
        [param buffer_size] indicates the number of bytes read from the file at once. A larger value means fewer reads but more memory usage.

        This function reads Lua code from a file and returns a [LuaFunction].
        If an error occurs during execution (e.g., syntax error), it will return a [LuaError].
      </description>
    </method>
    <method name="load_string">
      <return type="Variant" />
      <param index="0" name="chunk" type="String" />
      <param index="1" name="chunkname" type="String" default="&quot;&quot;" />
      <param index="2" name="env" type="LuaTable" default="null" />
      <description>
        Reads [param chunk] and returns a [LuaFunction].
        If an error occurs during execution (e.g., syntax error), it will return a [LuaError].
      </description>
    </method>
    <method name="open_libraries">
      <return type="void" />
      <param index="0" name="libraries" type="int" enum="LuaState.Library" is_bitfield="true" default="262143" />
      <description>
        Opens the specified libraries. See [enum Library] for [param libraries].
        By default, all libraries are opened.
        To open libraries other than LUA_BASE, you must also include LUA_BASE.
        [codeblocks]
        [gdscript]
        # Open LUA_BASE and LUA_PACKAGE libraries
        var lua_state = LuaState.new()
        lua_state.open_libraries(LuaState.LUA_BASE | LuaState.LUA_PACKAGE)

        # Omitting LUA_BASE will fail.
        var lua_state = LuaState.new()
        lua_state.open_libraries(LuaState.LUA_PACKAGE)
        # Prints "{}"
        print(state.globals.to_dictionary())
        [/gdscript]
        [/codeblocks]
      </description>
    </method>
  </methods>
  <members>
    <member name="globals" type="LuaTable" setter="" getter="get_globals">
      Returns the _G table of the LuaState.
      The _G table is the global table of the LuaState, which can be used by Lua scripts.
    </member>
    <member name="registry" type="LuaTable" setter="" getter="get_registry">
      Returns the registry table of the LuaState.
      The registry table is a private table of the LuaState that cannot be used by Lua scripts.
      Can be used in gdscript.
    </member>
  </members>
  <constants>
    <constant name="LUA_BASE" value="1" enum="Library" is_bitfield="true">
      The base library of Lua.
      Includes basic tables and methods such as [_G], [print], [load].
    </constant>
    <constant name="LUA_PACKAGE" value="2" enum="Library" is_bitfield="true">
      The package library of Lua.
      Adds the [package] table to the _G table when opened.
      The [package] table includes package-related tables, methods, and properties such as [preload], [searchpath], [path].
    </constant>
    <constant name="LUA_COROUTINE" value="4" enum="Library" is_bitfield="true">
      The coroutine library of Lua.
      Adds the [coroutine] table to the _G table when opened.
      The [coroutine] table includes methods related to coroutines such as [yield], [resume], [wrap].
    </constant>
    <constant name="LUA_STRING" value="8" enum="Library" is_bitfield="true">
      The string library of Lua.
      Adds the [string] table to the _G table when opened.
      The [string] table includes methods related to string operations such as [byte], [find], [format], [len].
    </constant>
    <constant name="LUA_OS" value="16" enum="Library" is_bitfield="true">
      The OS library of Lua.
      Adds the [os] table to the _G table when opened.
      The [os] table includes methods related to operating systems such as [clock], [execute], [getenv].
    </constant>
    <constant name="LUA_MATH" value="32" enum="Library" is_bitfield="true">
      The math library of Lua.
      Adds the [math] table to the _G table when opened.
      The [math] table includes methods and properties related to mathematical calculations such as [abs], [pi], [tan], [cos].
    </constant>
    <constant name="LUA_TABLE" value="64" enum="Library" is_bitfield="true">
      The table library of Lua.
      Adds the [table] table to the _G table when opened.
      The [table] table includes methods related to tables such as [insert], [move], [remove].
    </constant>
    <constant name="LUA_DEBUG" value="128" enum="Library" is_bitfield="true">
      The debug library of Lua.
      Adds the [debug] table to the _G table when opened.
      The [debug] table includes methods related to debugging such as [traceback], [debug], [upvalueid].
    </constant>
    <constant name="LUA_BIT32" value="256" enum="Library" is_bitfield="true">
      The bit32 library of Lua.
      Adds the [bit32] table to the _G table when opened.
      The [bit32] table includes methods related to bits such as [band], [bor].
      [b]Note: Bitwise operators were introduced in Lua 5.3, making this library redundant.[/b]
    </constant>
    <constant name="LUA_IO" value="512" enum="Library" is_bitfield="true">
      The io library of Lua.
      Adds the [io] table to the _G table when opened.
      The [io] table includes methods related to input/output such as [open], [close], [write].
    </constant>
    <constant name="LUA_FFI" value="1024" enum="Library" is_bitfield="true">
      The FFI library of LuaJIT.
      [b]Requires LuaJIT support; currently has no effect because built-in Lua is 5.4.[/b]
    </constant>
    <constant name="LUA_JIT" value="2048" enum="Library" is_bitfield="true">
      [b]Requires LuaJIT support; currently has no effect because built-in Lua is 5.4.[/b]
    </constant>
    <constant name="LUA_UTF8" value="4096" enum="Library" is_bitfield="true">
      The utf8 library of Lua.
      Adds the [utf8] table to the _G table when opened.
      The [utf8] table includes methods supporting UTF8 such as [char], [len].
    </constant>
    <constant name="LUA_ALL_LIBS" value="8191" enum="Library" is_bitfield="true">
      Equivalent to opening [enum LUA_BASE], [enum LUA_PACKAGE], [enum LUA_COROUTINE], [enum LUA_STRING], [enum LUA_OS], [enum LUA_MATH], [enum LUA_TABLE], [enum LUA_DEBUG], [enum LUA_BIT32], [enum LUA_IO], [enum LUA_FFI], [enum LUA_JIT], [enum LUA_UTF8].
    </constant>
    <constant name="GODOT_VARIANT" value="8192" enum="Library" is_bitfield="true">
      Godot's variant library.
      Adds Godot Variants like [AABB], [Vector3], [Basis] to the _G table when opened.
      These can be used in Lua scripts as follows:
      [codeblocks]
      -- Create a Vector3 in Lua
      local vec3 = Vector3.new()
      [/codeblocks]
    </constant>
    <constant name="GODOT_UTILITY_FUNCTIONS" value="16384" enum="Library" is_bitfield="true">
      Godot's utility_functions library.
      Adds Godot utility functions like [print], [abs] to the _G table when opened.
      [b]This will override some Lua functions such as [print].[/b]
    </constant>
    <constant name="GODOT_SINGLETONS" value="32768" enum="Library" is_bitfield="true">
    </constant>
    <constant name="GODOT_CLASSES" value="65536" enum="Library" is_bitfield="true">
      Godot's classes library.
      Adds Godot classes like [Node] to the _G table when opened.
      These can be used in Lua scripts as follows:
      [codeblocks]
      -- Create a Node in Lua
      local node = Node.new()
      [/codeblocks]
    </constant>
    <constant name="GODOT_ENUMS" value="131072" enum="Library" is_bitfield="true">
      Godot's enums library.
      Adds all Godot enums provided by [@GlobalScope] to the _G table when opened.
    </constant>
    <constant name="GODOT_ALL_LIBS" value="253952" enum="Library" is_bitfield="true">
      Equivalent to opening [enum GODOT_VARIANT], [enum GODOT_UTILITY_FUNCTIONS], [enum GODOT_SINGLETONS], [enum GODOT_CLASSES], [enum GODOT_ENUMS].
    </constant>
  </constants>
</class>
